#!/usr/bin/env python
import subprocess
import sys
import os
import datetime
import traceback

E2E_RUNNER_SCRIPT_NAME = "run_e2e_tests_with_logs.py"

def log_capture_script_message(level: str, message: str):
    """Logs messages for the capture_ui_demo.py script itself."""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
    print(f"{timestamp} [CAPTURE_SCRIPT:{level:<8}] {message}")

def main():
    """
    Main function to execute the E2E test runner script and display its output.
    """
    log_capture_script_message("INFO", f"Initiating execution of E2E test runner: {E2E_RUNNER_SCRIPT_NAME}")
    
    # Determine the path to the E2E runner script, assuming it's in the same directory
    # as this capture_ui_demo.py script.
    script_dir = os.path.dirname(os.path.abspath(__file__))
    e2e_runner_path = os.path.join(script_dir, E2E_RUNNER_SCRIPT_NAME)

    if not os.path.exists(e2e_runner_path):
        log_capture_script_message("ERROR", f"E2E runner script '{E2E_RUNNER_SCRIPT_NAME}' not found at '{e2e_runner_path}'.")
        log_capture_script_message("ERROR", "Please ensure 'run_e2e_tests_with_logs.py' is in the same directory as this script.")
        sys.exit(1)

    log_capture_script_message("INFO", f"Executing: {sys.executable} {e2e_runner_path}")
    print("\n" + "="*25 + f" BEGINNING E2E TEST LOGS (Output from {E2E_RUNNER_SCRIPT_NAME}) " + "="*25 + "\n")
    
    try:
        # Execute the script. Its output (stdout/stderr) will be inherited by this parent process
        # and thus printed to the console where capture_ui_demo.py is run.
        # The run_e2e_tests_with_logs.py script itself handles detailed logging and saving its own log file.
        process = subprocess.run(
            [sys.executable, e2e_runner_path],
            text=True,      # Ensure output is treated as text
            check=False,    # Do not raise CalledProcessError on non-zero exit; handle manually
            capture_output=False # Let subprocess print directly to this script's stdout/stderr
        )
        
        print("\n" + "="*25 + f" COMPLETED E2E TEST LOGS (Output from {E2E_RUNNER_SCRIPT_NAME}) " + "="*25 + "\n")

        if process.returncode == 0:
            log_capture_script_message("INFO", f"E2E test runner script '{E2E_RUNNER_SCRIPT_NAME}' completed successfully.")
            log_capture_script_message("INFO", "Refer to the output above and the log file generated by the runner script (e.g., e2e_test_run_YYYYMMDD_HHMMSS.log) for details.")
        else:
            log_capture_script_message("ERROR", f"E2E test runner script '{E2E_RUNNER_SCRIPT_NAME}' failed with return code {process.returncode}.")
            log_capture_script_message("ERROR", "Check the output above for failure details. A detailed log may also have been saved by the runner script.")
            sys.exit(process.returncode)
            
    except FileNotFoundError:
        log_capture_script_message("ERROR", f"Could not execute '{E2E_RUNNER_SCRIPT_NAME}'. Ensure Python interpreter ('{sys.executable}') is valid and the script exists at the expected path.")
        log_capture_script_message("ERROR", traceback.format_exc())
        sys.exit(1)
    except Exception as e:
        log_capture_script_message("CRITICAL", f"An unexpected error occurred while trying to run the E2E test runner: {str(e)}")
        log_capture_script_message("CRITICAL", traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    main()
