# ArkFoundry Sovereign AI Platform - Environment Variables Example
# Release 1.7
#
# This file serves as a template for the .env file.
# Copy this file to .env and fill in your actual configuration values.
# NEVER commit your actual .env file to version control.

# --- Flask Application Configuration ---
FLASK_APP=platform/app.py
# Description: Specifies the entry point for the Flask application.
# Example: platform/app.py
# Security Note: Standard Flask setting.

FLASK_ENV=development
# Description: Sets the Flask environment. Options: development, testing, production.
# Example: development
# Security Note: Set to 'production' for live deployments. 'development' enables debug mode.

SECRET_KEY=your_super_secret_and_long_random_string_here
# Description: A secret key used for session management, signing cookies, and cryptographic functions.
# Example: Generate a long, random string (e.g., using `openssl rand -hex 32`).
# Security Note: CRITICAL. Must be kept secret and be unique for each deployment. Change this for production.

DEBUG=True
# Description: Enables or disables Flask's debug mode.
# Example: True (for development), False (for production).
# Security Note: NEVER run with DEBUG=True in production as it can expose sensitive information.

# --- Database Configuration (PostgreSQL) ---
DATABASE_URL=postgresql://arkfoundry_user:arkfoundry_password@localhost:5432/arkfoundry_db
# Description: Full connection string for the PostgreSQL database.
# Example: postgresql://user:password@host:port/database
# Security Note: Contains database credentials. Secure appropriately.
# Alternatively, use individual variables below if DATABASE_URL is not set:
# POSTGRES_USER=arkfoundry_user
# POSTGRES_PASSWORD=arkfoundry_password
# POSTGRES_HOST=localhost
# POSTGRES_PORT=5432
# POSTGRES_DB=arkfoundry_db

# --- Redis Configuration (Caching & Celery Broker/Backend) ---
REDIS_URL=redis://localhost:6379/0
# Description: Connection string for Redis. Used for Celery message broker, result backend, and application caching.
# Example: redis://:yourpassword@your_redis_host:6379/0 (if password protected)
# Security Note: If Redis is password protected, include the password in the URL. Ensure Redis is secured.
# Individual Redis DBs for different purposes (optional, if REDIS_URL points to DB 0):
REDIS_DB_CELERY=0
REDIS_DB_CACHE=1
REDIS_DB_RATE_LIMIT=2
REDIS_DB_ZTA_BEHAVIOR=3

# --- Celery Configuration ---
# CELERY_BROKER_URL is typically the same as REDIS_URL (or a specific Redis DB for Celery)
# CELERY_RESULT_BACKEND can also be REDIS_URL or a database URL.
# These are often configured directly in platform/config.py based on REDIS_URL.
# Example if separate:
# CELERY_BROKER_URL=redis://localhost:6379/0
# CELERY_RESULT_BACKEND=redis://localhost:6379/1

# --- JWT (JSON Web Token) Configuration ---
JWT_SECRET_KEY=another_very_strong_and_random_jwt_secret_key
# Description: Secret key for signing JWTs. Should be different from FLASK_SECRET_KEY.
# Example: Generate another long, random string.
# Security Note: CRITICAL. Must be kept secret. Change this for production.

JWT_ACCESS_TOKEN_EXPIRES_SECONDS=3600
# Description: Lifetime of access tokens in seconds (e.g., 3600 = 1 hour).
# Example: 3600

JWT_REFRESH_TOKEN_EXPIRES_SECONDS=2592000
# Description: Lifetime of refresh tokens in seconds (e.g., 2592000 = 30 days).
# Example: 2592000

# --- Mail Server Configuration (for notifications, email verification) ---
MAIL_SERVER=smtp.example.com
# Description: SMTP server address.
# Example: smtp.gmail.com or your organization's SMTP server.

MAIL_PORT=587
# Description: SMTP server port.
# Example: 587 (for TLS), 465 (for SSL).

MAIL_USE_TLS=True
# Description: Whether to use TLS for SMTP.
# Example: True

MAIL_USE_SSL=False
# Description: Whether to use SSL for SMTP.
# Example: False (usually one of TLS or SSL is true, not both).

MAIL_USERNAME=your_email_username@example.com
# Description: Username for SMTP authentication.
# Example: user@yourdomain.com

MAIL_PASSWORD=your_email_password
# Description: Password for SMTP authentication.
# Example: your_actual_password
# Security Note: Store securely, consider using app-specific passwords if supported by your provider.

MAIL_DEFAULT_SENDER="ArkFoundry Platform <noreply@arkfoundry.ai>"
# Description: Default "from" address for emails sent by the platform.
# Example: "ArkFoundry Notifications <noreply@yourdomain.com>"

SECURITY_EMAIL_SENDER="ArkFoundry Security <security@arkfoundry.ai>"
# Description: Sender address for security-related emails (e.g., ZTA alerts).
# Example: "Platform Security <security@yourdomain.com>"

# --- KMS Configuration (Data Sovereignty) ---
KMS_PROVIDER=mock
# Description: Key Management Service provider. Options: mock, aws, azure, hashicorp_vault.
# Example: mock (for local dev/test), aws (for AWS KMS).
# Security Note: For production, use a real KMS provider.

# For KMS_PROVIDER=mock
MOCK_KMS_DEFAULT_KEK_ID=alias/arkfoundry-default-kek
# Description: Identifier for the default Key Encrypting Key in the mock KMS.

# For KMS_PROVIDER=aws
AWS_KMS_KEY_ID=arn:aws:kms:your-region:your-account-id:key/your-key-id
# Description: ARN of the AWS KMS Customer Master Key (CMK) to use as KEK.
# Example: arn:aws:kms:us-east-1:123456789012:key/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx
# Security Note: Ensure the application role/user has encrypt/decrypt permissions for this key.

AWS_REGION=us-east-1
# Description: AWS region for KMS and other AWS services (like S3).
# Example: eu-west-1

# For KMS_PROVIDER=azure (Example, specific config might vary)
# AZURE_KEY_VAULT_URL=https://yourvaultname.vault.azure.net/
# AZURE_KEY_VAULT_KEY_NAME=your-kek-name
# AZURE_KEY_VAULT_KEY_VERSION=your-kek-version
# AZURE_TENANT_ID=...
# AZURE_CLIENT_ID=...
# AZURE_CLIENT_SECRET=...

# For KMS_PROVIDER=hashicorp_vault (Example)
# VAULT_ADDR=https://your-vault-server:8200
# VAULT_TOKEN=your_vault_access_token # Or other auth methods
# VAULT_TRANSIT_KEY_NAME=arkfoundry-kek

# --- AI Classifier Configuration (Data Sovereignty) ---
AI_CLASSIFIER_TYPE=mock
# Description: Type of AI classifier to use. Options: mock, local_spacy, remote_service.
# Example: mock (for Phase 1), local_spacy (if using a local spaCy model).

# If AI_CLASSIFIER_TYPE=local_spacy
SPACY_MODEL_NAME=en_core_web_sm
# Description: Name of the spaCy model to load for local classification.
# Example: en_core_web_md (larger, more accurate) or a custom trained model path.

# If AI_CLASSIFIER_TYPE=remote_service
# AI_CLASSIFIER_ENDPOINT=https://your.ai.classifier.api/suggest
# AI_CLASSIFIER_API_KEY=your_classifier_api_key

# --- Threat Intelligence Configuration ---
VIRUSTOTAL_API_KEY=your_virustotal_public_api_key
# Description: API key for VirusTotal Public API (used for IOC enrichment).
# Example: Obtain from VirusTotal website.
# Security Note: Public API has rate limits. For production, consider a private API key.

GEOIP_DB_PATH=ops/data/GeoLite2-City.mmdb
# Description: Path to the MaxMind GeoLite2 City database file.
# Example: ./data/GeoLite2-City.mmdb (download from MaxMind).

# --- CORS Configuration (Cross-Origin Resource Sharing) ---
CORS_ORIGINS="http://localhost:3000,http://localhost:8080,https://arkfoundry.ai,https://admin.arkfoundry.ai"
# Description: Comma-separated list of allowed origins for CORS. Use '*' for all (not recommended for production).
# Example: "https://yourfrontend.com,https://yourapi-docs.com"
# Security Note: Be specific with origins in production.

# --- Rate Limiting Configuration ---
RATELIMIT_ENABLED=True
# Description: Enable or disable global rate limiting.
# Example: True

RATELIMIT_STORAGE_URL=redis://localhost:6379/2
# Description: Storage URL for flask-limiter (e.g., Redis DB for rate limiting).
# Example: redis://localhost:6379/2 (uses Redis DB 2)

RATELIMIT_STRATEGY=fixed-window
# Description: Rate limiting strategy. Options: fixed-window, fixed-window-elastic-expiry, moving-window.
# Example: fixed-window

RATELIMIT_DEFAULT="2000 per hour;100 per minute"
# Description: Default rate limits applied to all routes unless overridden.
# Example: "100 per minute;20 per second"

RATELIMIT_AUTH_LOGIN="10 per minute;50 per hour"
# Description: Specific rate limit for authentication/login endpoints.
# Example: "5 per minute"

# --- S3/Object Storage Configuration (for Data Assets, Gov Docs etc.) ---
# Used by DataSovereigntyService and GovernmentSolutionsService for storing actual file content.
OBJECT_STORAGE_TYPE=local_mock
# Description: Type of object storage. Options: local_mock, s3, minio.
# Example: s3

# If OBJECT_STORAGE_TYPE=local_mock
MOCK_OBJECT_STORAGE_PATH=/tmp/arkfoundry_object_storage/
# Description: Local filesystem path for mock object storage. Ensure this path is writable.

# If OBJECT_STORAGE_TYPE=s3
S3_BUCKET_NAME=arkfoundry-platform-data-prod
# Description: Name of the S3 bucket for storing data assets.
# Example: my-arkfoundry-data-bucket

S3_REGION_NAME=us-east-1
# Description: AWS region for the S3 bucket. (Can often be same as AWS_REGION)

# AWS Credentials for S3 (if not using IAM roles for EC2/ECS/EKS)
# AWS_ACCESS_KEY_ID=your_aws_access_key_id_for_s3
# AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key_for_s3
# Security Note: Prefer IAM roles over hardcoding credentials for AWS deployments.

# If OBJECT_STORAGE_TYPE=minio
# MINIO_ENDPOINT_URL=your-minio-server:9000
# MINIO_ACCESS_KEY=your_minio_access_key
# MINIO_SECRET_KEY=your_minio_secret_key
# MINIO_BUCKET_NAME=arkfoundry-data
# MINIO_USE_SSL=False

# --- General Application Settings ---
PLATFORM_NAME="ArkFoundry Sovereign AI Platform"
# Description: Display name for the platform.

# Initial Admin User (used by init_db.py if no admin exists)
# These are only used for the very first setup. Change the password immediately after.
DEFAULT_ADMIN_EMAIL=admin@arkfoundry.ai
DEFAULT_ADMIN_USERNAME=arkadmin
DEFAULT_ADMIN_PASSWORD=SovereignPassword2025!_ChangeMe!
# Security Note: CRITICAL. Change this password immediately after initial setup.
# init_db.py should ideally prompt for this or generate a random one if not set.

# Base URLs for different parts of the application (used for generating links, redirects etc.)
API_BASE_URL="http://localhost:5000/api/v1" # Where the Flask API is served
WEBSITE_BASE_URL="http://localhost:8080" # Where main website/portals are served (if separate from API)

# --- Logging Configuration ---
LOG_LEVEL=INFO
# Description: Logging level for the application. Options: DEBUG, INFO, WARNING, ERROR, CRITICAL.
# Example: DEBUG (for development), INFO (for production).

# --- Optional: External Service Endpoints ---
# Example: If an external service is used by a custom ArcFlow task
# CUSTOM_FINANCE_API_ENDPOINT=https://api.financeprovider.com/v2
# CUSTOM_FINANCE_API_KEY=your_finance_api_key

# --- Session Configuration (if using Flask-Session with server-side sessions) ---
# SESSION_TYPE=redis # Example: 'redis', 'filesystem', 'sqlalchemy'
# SESSION_REDIS_URL=redis://localhost:6379/4 # Use a different Redis DB for sessions
# SESSION_PERMANENT=True
# PERMANENT_SESSION_LIFETIME_SECONDS=86400 # 1 day

# --- Frontend URLs (if needed by backend for redirects, email links etc.) ---
FRONTEND_BASE_URL="http://localhost:3000" # If using a separate SPA frontend
EMAIL_VERIFICATION_URL_TEMPLATE="${FRONTEND_BASE_URL}/verify-email?token=${token}"
PASSWORD_RESET_URL_TEMPLATE="${FRONTEND_BASE_URL}/reset-password?token=${token}"

# --- Feature Flags (Example) ---
# FEATURE_QUANTUM_SIMULATION_ENABLED=False
# FEATURE_BIOLOGICAL_AI_INTERFACE_ACTIVE=False

# --- Default Values for System Settings (Can be overridden in Admin UI) ---
# These are fallback values if not found in the SystemSetting DB table.
DEFAULT_SYSTEM_SETTING_MAINTENANCE_MODE=False
DEFAULT_SYSTEM_SETTING_GLOBAL_THREAT_LEVEL=LOW
DEFAULT_SYSTEM_SETTING_DATA_RETENTION_DAYS_OPERATIONAL_LOGS=90
DEFAULT_SYSTEM_SETTING_DATA_RETENTION_DAYS_AUDIT_LOGS=3650 # 10 years for audit

# Note: Add any other service-specific configurations as needed.
# For example, if a specific AI model needs a path or API key, it could be added here
# or managed via the AdminAIModel configuration in the database.
# This .env.example should cover all settings read directly via os.environ.get() in config.py
# or other parts of the application.
